extends ../pug/layout
block variables
  -
    title = "Тарифный калькулятор"
    description = "Онлайн-расчет стоимости грузоперевозки в зависимости от характеристик груза по тарифам ТК Берг."

block head
  script(src="vendor/imask/imask.min.js")

block content
  include ../pug/tariffs
  -
    const places = tariffs.places;
    const heavyCargoPrices = tariffs.heavyCargoPrices;
    const lightCargoPrices = tariffs.lightCargoPrices;
    const minPrices = tariffs.minPrices;
    const fridgePrices = tariffs.fridgePrices;

  article
    h2.h2 Тарифный калькулятор

    form.form(name="calculator")
      section.form__section
        h3.h3 Направление
        .form__section-content
          .control-group(style="display: flex; flex-wrap: wrap;")
            .control(style="width: min-content;")
              label(for="origin") Место отправления
              select#origin(name="origin")
                option(selected, value) &lt;не выбрано&gt;
                each placeName, place in places
                  option(value=place)=placeName
            .control(style="width: min-content;")
              label(for="destination") Место получения
              select#destination(name="destination")
                option(selected, value) &lt;не выбрано&gt;
                each placeName, place in places
                  option(value=place)=placeName
          p.direction-error-message(aria-live="assertive", hidden) Cтоимость перевозки по данному направлению можно узнать у #[a.link(href="contacts.html") сотрудников компании], автоматический расчет тарифа не предусмотрен.

      section.form__section
        h3.h3 Характеристики груза
        .form__section-content
          .control-group.flex.flex--wrap
            .control.min-content
              label(for="weight") Вес груза, кг
              input#weight(type="text", name="weight", inputmode="decimal", style="width: 15ch;")
            .control.min-content
              label(for="volume") Объем груза, м³
              input#volume(type="text", name="volume", inputmode="decimal", style="width: 15ch;")

          .control-group
            .control
              input#ic-engine(type="checkbox", name="params[]", value="ic-engine")
              label(for="ic-engine") Это двигатель внутреннего сгорания
            .control
              input#fridge(type="checkbox", name="params[]", value="fridge")
              label(for="fridge") Необходимо соблюдение температурного режима для груза (+ или - °С)
            .control
              input#oversized(type="checkbox", name="params[]", value="oversized")
              label(for="oversized") Негабаритный груз

      section.form__section
        h3.h3 Результат расчета
        .form__section-content
          .control-group
            .control
              p.h1(style="font-size: xx-large;")
                output(name="result", aria-live="assertive")
          .control-group
            .control
              p.cargo-category(aria-live="assertive") &nbsp;

    script.
      (()=>{
        const isNumber = (value) => typeof value === 'number' && isFinite(value);
        const form = document.forms.calculator;

        const weightElement = form.querySelector('[name="weight"]');
        const weightMask = new IMask(weightElement, {
          mask: Number,  // enable number mask

          scale: 1,  // digits after point, 0 for integers
          signed: false,  // disallow negative
          thousandsSeparator: '',  // any single char
          padFractionalZeros: false,  // if true, then pads zeros at end to the length of scale
          normalizeZeros: true,  // appends or removes zeros at ends
          radix: ',',  // fractional delimiter
          mapToRadix: ['.']  // symbols to process as radix
        });

        const volumeElement = form.querySelector('[name="volume"]');
        const volumeMask = new IMask(volumeElement, {
          mask: Number,  // enable number mask

          scale: 3,  // digits after point, 0 for integers
          signed: false,  // disallow negative
          thousandsSeparator: '',  // any single char
          padFractionalZeros: false,  // if true, then pads zeros at end to the length of scale
          normalizeZeros: true,  // appends or removes zeros at ends
          radix: ',',  // fractional delimiter
          mapToRadix: ['.']  // symbols to process as radix
        });

        const tariffs=!{JSON.stringify(tariffs, (key, value) => (value === Infinity ? 'Infinity' : value)).replace(/"Infinity"/g, 'Infinity')};

        const places = tariffs.places;
        const oversizedRaisingFactor = tariffs.oversizedRaisingFactor;
        const heavyCargoPrices = tariffs.heavyCargoPrices;
        const lightCargoPrices = tariffs.lightCargoPrices;
        const minPrices = tariffs.minPrices;
        const fridgePrices = tariffs.fridgePrices;
        const icenginePrices = tariffs.icenginePrices;

        const calcLightPrice = ({volume, origin, destination}) => {
          if (!isNumber(volume)) return {title: null, tariff: null, amount: null};

          let idx = 0;
          while (volume >= lightCargoPrices[idx].limit) {
            idx++;
            if (!lightCargoPrices[idx]) throw Error();
          };
          const tariff = lightCargoPrices[idx].price?.[origin]?.[destination] ?? null;
          const amount = tariff * volume;
          const title = "легкий груз " + lightCargoPrices[idx].title;
          const limit = lightCargoPrices[idx].limit;

          return {title, tariff, amount, limit};
        }

        const calcHeavyPrice = ({weight, origin, destination}) => {
          if (!isNumber(weight)) return {title: null, tariff: null, amount: null};

          let idx = 0;
          while (weight >= heavyCargoPrices[idx].limit) {
            idx++;
            if (!heavyCargoPrices[idx]) throw Error();
          };
          const tariff = heavyCargoPrices[idx].price?.[origin]?.[destination] ?? null;
          const amount = tariff * weight;
          const title = "тяжелый груз " + heavyCargoPrices[idx].title;
          const limit = heavyCargoPrices[idx].limit

          return {title, tariff, amount, limit};
        }

        const calcICEnginePrice = ({params, origin, destination}) => {
          const isICEngine = (params?.includes('ic-engine')) ?? false;
          if (!isICEngine) return null;

          const amount = icenginePrices.price?.[origin]?.[destination] ?? 0;
          const title = icenginePrices.title;
          return {title, amount};
        }

        const calcMinPrice = ({weight, volume, params, origin, destination}) => {
          let priceFound = null;

          for (let idx = 0; idx < minPrices.length; ++idx) {
            const needWeightChecking = isNumber(minPrices[idx].limitHeavy);
            const weigthChecked = needWeightChecking && weight < minPrices[idx].limitHeavy;
            const needVolumeChecking = isNumber(minPrices[idx].limitLight);
            const volumeChecked = needVolumeChecking && volume < minPrices[idx].limitLight;

            if ((!needWeightChecking || weigthChecked) && (!needVolumeChecking || volumeChecked)) {
              priceFound = minPrices[idx];
              break;
            }
          }

          if (!priceFound) {
            return null;
          };

          const amount = priceFound.price?.[origin]?.[destination] ?? 0;
          const title = "минимально за мелкий груз " + priceFound.title?.replaceAll("<br>", " ");

          return {title, amount};
        }

        const processCalc = ({weight, volume, params, origin, destination}) => {
          if (!isNumber(weight) || weight <= 0 || !isNumber(volume) || volume <= 0) return null;

          let price;

          const minPrice = calcMinPrice({weight, volume, params, origin, destination});

          if (minPrice) {
            price = minPrice;
          } else {
            price = volume * 1000 / weight > 5
              ? calcLightPrice({weight, volume, params, origin, destination})
              : calcHeavyPrice({weight, volume, params, origin, destination});
          }

          const isFridge = (params?.includes('fridge')) ?? false;
          const isOversized = (params?.includes('ic-engine') || params?.includes('oversized')) ?? false;

          const fridgeAmount = isFridge ? (fridgePrices.price?.[origin]?.[destination] ?? 0) : null;

          if (isOversized) {
            price.amount = oversizedRaisingFactor * price.amount;
          }

          const ICEnginePrice = calcICEnginePrice({weight, volume, params, origin, destination});
          if (ICEnginePrice && ICEnginePrice.amount > price.amount) {
            price = ICEnginePrice
          }

          if (fridgeAmount > 0) {
            price.amount += fridgeAmount;
          }

          price.isOversized = isOversized;
          return price;
        }

        const handleFormChange = (event) => {
          const form = event.currentTarget;
          const data = new FormData(form);

          const weight = parseFloat((data.get('weight') ?? '').replace(',', '.'));
          const volume = parseFloat((data.get('volume') ?? '').replace(',', '.'));

          const origin = data.get('origin');
          const destination = data.get('destination');

          const directionIsSelected = Boolean(origin && destination);
          const directionIsValid = processCalc({weight: 1000, volume: 1, origin, destination}).amount > 0;

          const directionErrorMessageElement = form.querySelector('.direction-error-message');
          directionErrorMessageElement.hidden = !directionIsSelected || directionIsValid;

          const price = processCalc({weight, volume, params: data.getAll('params[]'), origin, destination});

          const categoryMessage = price ? price.title + (price.isOversized ? '<br>негабаритный груз' : '') : '&nbsp;';
          const cargoCategoryElement = form.querySelector('.cargo-category');
          cargoCategoryElement.innerHTML = categoryMessage;

          const priceValue = (price && price.amount > 0)
            ? `${parseFloat(price.amount.toFixed(2))} ₽`
            : price.limit === Infinity
              ? 'Машинорейс по договоренности'
              : '<не рассчитано>';

          const resultElement = form.elements.result;
          resultElement.value = priceValue;
        };

        form.addEventListener('input', handleFormChange);
        form.addEventListener('submit', (event) => {
          console.log('submit', event);
        });

        // fix bug with restoring form state with back button
        window.addEventListener('pageshow', () => {
          weightMask.updateValue();
          volumeMask.updateValue();

          form.dispatchEvent(new Event('input'));
        });
      })();
