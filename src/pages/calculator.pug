extends ../pug/layout

block head
  script(src="vendor/imask/imask.min.js")

block content
  include ../pug/tariffs
  -
    const places = tariffs.places;
    const heavyCargoPrices = tariffs.heavyCargoPrices;
    const lightCargoPrices = tariffs.lightCargoPrices;
    const minPrices = tariffs.minPrices;
    const fridgePrices = tariffs.fridgePrices;

  //TODO оформить покрасивее
  article
    h2.h2 Тарифный калькулятор

    form(name="calculator")
      fieldset
        legend
          h3.h3 Направление
        .control
          label(for="origin") Место отправления
          select#origin(name="origin")
            option(selected, value) &lt;не выбрано&gt;
            each placeName, place in places
              option(value=place)=placeName
        .control
          label(for="destination") Место получения
          select#destination(name="destination")
            option(selected, value) &lt;не выбрано&gt;
            each placeName, place in places
              option(value=place)=placeName

      fieldset
        legend
          h3.h3 Характеристики груза
        .control
          label(for="weight") Масса груза, килограммы
          input#weight(type="text", name="weight", inputmode="decimal")
        .control
          label(for="volume") Объем груза, кубометры
          input#volume(type="text", name="volume", inputmode="decimal")
        .control
          p.cargo-category &nbsp;
        .control
          input#ic-engine(type="checkbox", name="params[]", value="ic-engine")
          label(for="ic-engine") Это двигатель внутреннего сгорания
        .control
          input#fridge(type="checkbox", name="params[]", value="fridge")
          label(for="fridge") Необходимо соблюдение температурного режима для груза (+ или - °С)
        .control
          input#oversized(type="checkbox", name="params[]", value="oversized")
          label(for="oversized") Негабаритный груз

      fieldset
        legend
          h3.h3 Результат расчета
        .control
          p.result.h1(style="font-size: xx-large;") &nbsp;

    script.
      (()=>{
        // TODO Валидация данных пока не сделана
        const isNumber = (value) => typeof value === 'number' && isFinite(value);
        const form = document.forms.calculator;

        const weightElement = form.querySelector('[name="weight"]');
        new IMask(weightElement, {
          mask: Number,  // enable number mask

          scale: 1,  // digits after point, 0 for integers
          signed: false,  // disallow negative
          thousandsSeparator: '',  // any single char
          padFractionalZeros: false,  // if true, then pads zeros at end to the length of scale
          normalizeZeros: true,  // appends or removes zeros at ends
          radix: ',',  // fractional delimiter
          mapToRadix: ['.']  // symbols to process as radix
        });

        const volumeElement = form.querySelector('[name="volume"]');
        new IMask(volumeElement, {
          mask: Number,  // enable number mask

          scale: 2,  // digits after point, 0 for integers
          signed: false,  // disallow negative
          thousandsSeparator: '',  // any single char
          padFractionalZeros: false,  // if true, then pads zeros at end to the length of scale
          normalizeZeros: true,  // appends or removes zeros at ends
          radix: ',',  // fractional delimiter
          mapToRadix: ['.']  // symbols to process as radix
        });

        const tariffs=!{JSON.stringify(tariffs, (key, value) => (value === Infinity ? 'Infinity' : value)).replace(/"Infinity"/g, 'Infinity')};

        const places = tariffs.places;
        const oversizedRaisingFactor = tariffs.oversizedRaisingFactor;
        const heavyCargoPrices = tariffs.heavyCargoPrices;
        const lightCargoPrices = tariffs.lightCargoPrices;
        const minPrices = tariffs.minPrices;
        const fridgePrices = tariffs.fridgePrices;
        const icenginePrices = tariffs.icenginePrices;

        const cargoCategories = {
          LIGHT: 'легкий',
          HEAVY: 'тяжелый'
        }

        const detectCargoCategory = (weight, volume) => {
          if (!isNumber(weight) && !isNumber(volume)) return null;
          if (isNumber(weight) && !isNumber(volume)) return cargoCategories.HEAVY;
          if (!isNumber(weight) && isNumber(volume)) return cargoCategories.LIGHT;

          const detectLight = (volume / (weight * 0.001)) >= 5;
          return detectLight ? cargoCategories.LIGHT : cargoCategories.HEAVY;
        }

        const processCalc = ({weight, volume, params, origin, destination}) => {
          const cargoCategory = detectCargoCategory(weight, volume);
          if (!cargoCategory) return null;

          const isICEngine = params.includes('ic-engine');
          const isFridge = params.includes('fridge');
          const isOversized = isICEngine || params.includes('oversized');

          let cargoPrices, cargoIndicator, limit;
          switch (cargoCategory) {
            case cargoCategories.LIGHT:
              cargoPrices = lightCargoPrices;
              cargoIndicator = volume;
              limitKey = 'limitLight';
              break;
            case cargoCategories.HEAVY:
              cargoPrices = heavyCargoPrices;
              cargoIndicator = weight;
              limitKey = 'limitHeavy';
              break;
            default: throw Error();
          };

          let idx = 0;;
          while (cargoIndicator >= cargoPrices[idx].limit) {
            idx++;
            if (!cargoPrices[idx]) throw Error();
          };
          console.log('price', cargoPrices[idx]);

          const tariff = cargoPrices[idx].price?.[origin]?.[destination] ?? null;
          if (!isNumber(tariff)) return null;

          let amount = tariff * cargoIndicator * (isOversized ? oversizedRaisingFactor : 1);

          idx = 0;
          // console.log(cargoIndicator, minPrices[idx]?.[limitKey]);
          while((minPrices[idx][limitKey] === null) || (cargoIndicator > minPrices[idx][limitKey])) {
            idx++;
            // console.log(cargoIndicator, minPrices[idx]?.[limitKey]);
            if (!minPrices[idx]) break;
          };
          console.log('minPrice', minPrices[idx]);

          const minAmount = minPrices[idx]?.price?.[origin]?.[destination] ?? 0;

          const fridgeAmount = isFridge ? (fridgePrices.price?.[origin]?.[destination] ?? 0) : 0;
          const ICEngineAmount = isICEngine ? (icenginePrices.price?.[origin]?.[destination] ?? 0) : 0;

          const finalAmount = Math.max(amount, minAmount, ICEngineAmount) + fridgeAmount;

          console.log({origin, destination, finalAmount});
          console.log({amount, minAmount, ICEngineAmount, fridgeAmount});
          return finalAmount;
        }

        const handleFormChange = (event) => {
          const form = event.currentTarget;
          const data = new FormData(form);
          // console.log([...data.entries()]);
          const weight = parseFloat(data.get('weight'));
          const volume = parseFloat(data.get('volume'));

          const cargoCategory = detectCargoCategory(weight, volume);
          const cargoCategoryElement = form.querySelector('.cargo-category');
          cargoCategoryElement.innerHTML = `${cargoCategory ? cargoCategory + ' груз': '&nbsp;'}`;

          const origin = data.get('origin');
          const destination = data.get('destination');

          const amount = processCalc({weight, volume, params: data.getAll('params[]'), origin, destination});

          form.querySelector('.result').innerHTML = amount === null ? '<не рассчитано>' : `${amount} рублей`;
        };

        form.addEventListener('change', handleFormChange);
        form.addEventListener('submit', (event) => {
          console.log('submit', event);
        })
      })();

  div(style="display: none;")
    |        // ДВС
    |        "ice" => array(2000, 2800, 3600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),

    |        // рефрижераторная установка
    |        "ref" => array(4000, 8000, 8000, 4000, 8000, 8000, 4000, 4000, 4000, 4000, 4000, 8000, 8000, 8000, 4000),

    |        // минимально за мелкий груз
    |        "min" => array (
    |			// документы до 0.5 кг, в расчете не учитываются
    |			array( 250, 350, 350, 250, 350, 350, 250, 250, 250, 250, 250, 250, 250, 250, 250 ),
    |			// первый минимум, примерно от 1 кг до 70 кг  (0.35 м куб.)
    |			array( 350, 500, 650, 350, 450, 600, 300, 300, 350, 300, 300, 500, 450, 400, 150 ),
    |			// второй минииум, примерно от 70 кг (0.35 м куб.) до 150 кг (0,75 м куб.)
    |			array( 750, 1200, 1350, 750, 1050, 1250, 600, 550, 750, 650, 600, 1050, 1000, 850, 350 ),
    |		),

    |        // легкий груз
    |        "light" => array(
    |            // до 5 метров куб.
    |            array(1000, 1600, 1800, 1000, 1400, 1700, 740, 700, 1100, 900, 1100, 1600, 1600, 1300, 500),
    |            // от 5 до 25 метров куб.
    |            array(960, 1400, 1700, 800, 1200, 1600, 600, 540, 1000, 800, 1000, 1400, 1400, 1100, 400),
    |            // от 25 до 50 метров куб.
    |            array(800, 1200, 1600, 700, 1000, 1500, 500, 440, 900, 700, 800, 1200, 1200, 1000, 380),
    |            // от 50 до 75 метров куб.
    |            array(760, 1100, 1500, 640, 900, 1400, 420, 400, 800, 640, 600, 1000, 1000, 900, 340),
    |            // более 75 метров куб.
    |            array(660, 1000, 1300, 600, 800, 1200, 400, 380, 740, 600, 400, 800, 800, 700, 300)
    |        ),

    |        // тяжелый груз
    |        "heavy" => array(
    |            // до 1000 кг
    |            array( 5.00, 8.00, 9.00, 5.00, 7.00, 8.50, 3.70, 3.50, 5.50, 4.50, 5.50, 8.00, 8.00, 6.50, 2.50 ),
    |            // от 1000 до 5000 кг
    |            array( 4.80, 7.00, 8.50, 4.00, 6.00, 8.00, 3.00, 2.70, 5.00, 4.00, 5.00, 7.00, 7.00, 5.50, 2.00 ),
    |            // от 5000 до 10000 кг
    |            array( 4.00, 6.00, 8.00, 3.50, 5.00, 7.50, 2.50, 2.20, 4.50, 3.50, 4.00, 6.00, 6.00, 5.00, 1.90 ),
    |            // от 10000 до 15000 кг
    |            array( 3.80, 5.50, 7.50, 3.20, 4.50, 7.00, 2.10, 2.00, 4.00, 3.20, 3.00, 5.00, 5.00, 4.50, 1.70 ),
    |            // более 15000 кг
    |            array( 3.30, 5.00, 6.50, 3.00, 4.00, 6.00, 2.00, 1.90, 3.70, 3.00, 2.00, 4.00, 4.00, 3.50, 1.50 )
    |        )
