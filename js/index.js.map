{"version":3,"file":"index.js","sources":["src/js/config/index.js","src/js/common/set-place.js","src/js/index.js"],"sourcesContent":["export const suggestionToken = \"e4c13b47d64f3864376e4c6dafb753bf619f08bb\";\n","import {suggestionToken} from \"../config\";\n\nconst url =\n  \"https://suggestions.dadata.ru/suggestions/api/4_1/rs/iplocate/address\";\n\nconst options = {\n  method: \"GET\",\n  mode: \"cors\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    Authorization: \"Token \" + suggestionToken\n  }\n};\n\nexport const setPlace = async () => {\n  const userPlace = localStorage.getItem(\"userPlace\");\n  if (userPlace) return userPlace;\n\n  try {\n    const response = await fetch(url, options);\n    if (!response.ok) return;\n    const place = await response.json();\n    const {city, region} = place.location.data;\n\n    const placeRegions = {\n      Приморский: \"Владивосток\", // eslint-disable-line sonarjs/no-duplicate-string\n      Хабаровский: \"Хабаровск\",\n      Амурская: \"Благовещенск\"\n    };\n\n    const placeCities = [\n      \"Владивосток\",\n      \"Уссурийск\",\n      \"Хабаровск\",\n      \"Благовещенск\"\n    ];\n\n    let userPlaceDetected;\n    if (placeCities.includes(city)) {\n      userPlaceDetected = city;\n    } else if (Object.keys(placeRegions).includes(region)) {\n      userPlaceDetected = region;\n    } else {\n      userPlaceDetected = \"Владивосток\";\n    }\n\n    localStorage.setItem(\"userPlace\", userPlaceDetected);\n\n    return userPlaceDetected;\n  } catch (err) {\n    console.error(err);\n  }\n};\n","import {setPlace} from \"./common/set-place.js\";\n\n(async () => {\n  const userPlace = await setPlace();\n  select.value = userPlace;\n  select.dispatchEvent(new Event(\"change\"));\n})();\n\nconst select = document.getElementById(\"contacts__place-selector\");\n\nselect.addEventListener(\"change\", (event) => {\n  const target = event.target;\n  const place = target.value;\n  localStorage.setItem(\"userPlace\", place);\n\n  target.style.width = `${place.length}ch`;\n\n  const contactsElement = document.getElementById(\"contacts\");\n  const placeDependentElements = contactsElement.querySelectorAll(\n    \"[data-place]\"\n  );\n  placeDependentElements.forEach((element) => {\n    element.hidden = element.dataset.place !== place;\n  });\n});\n"],"names":["options","method","mode","headers","Accept","Authorization","userPlace","async","localStorage","getItem","response","fetch","ok","place","json","city","region","location","data","placeRegions","userPlaceDetected","includes","Object","keys","setItem","err","console","error","setPlace","select","value","dispatchEvent","Event","document","getElementById","addEventListener","event","target","style","width","length","querySelectorAll","forEach","element","hidden","dataset"],"mappings":"yBAAO,MCKDA,EAAU,CACdC,OAAQ,MACRC,KAAM,OACNC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,mBACRC,cAAe,mDCTnB,WACE,MAAMC,ODYgBC,WACtB,MAAMD,EAAYE,aAAaC,QAAQ,aACvC,GAAIH,EAAW,OAAOA,EAEtB,IACE,MAAMI,QAAiBC,MAjBzB,wEAiBoCX,GAClC,IAAKU,EAASE,GAAI,OAClB,MAAMC,QAAcH,EAASI,QACvBC,KAACA,EAAIC,OAAEA,GAAUH,EAAMI,SAASC,KAEhCC,EAAe,CACnB,aAAY,cACZ,cAAa,YACb,WAAU,gBAUZ,IAAIC,EAWJ,OATEA,EATkB,CAClB,cACA,YACA,YACA,gBAIcC,SAASN,GACHA,EACXO,OAAOC,KAAKJ,GAAcE,SAASL,GACxBA,EAEA,cAGtBR,aAAagB,QAAQ,YAAaJ,GAE3BA,EACP,MAAOK,GACPC,QAAQC,MAAMF,KChDQG,GACxBC,EAAOC,MAAQxB,EACfuB,EAAOE,cAAc,IAAIC,MAAM,YAHjC,GAMA,MAAMH,EAASI,SAASC,eAAe,4BAEvCL,EAAOM,iBAAiB,UAAWC,IACjC,MAAMC,EAASD,EAAMC,OACfxB,EAAQwB,EAAOP,MACrBtB,aAAagB,QAAQ,YAAaX,GAElCwB,EAAOC,MAAMC,MAAQ,GAAG1B,EAAM2B,WAENP,SAASC,eAAe,YACDO,iBAC7C,gBAEqBC,SAASC,IAC9BA,EAAQC,OAASD,EAAQE,QAAQhC,QAAUA","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbInNyYy9qcy9jb25maWcvaW5kZXguanMiLCJzcmMvanMvY29tbW9uL3NldC1wbGFjZS5qcyIsInNyYy9qcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3Qgc3VnZ2VzdGlvblRva2VuID0gXCJlNGMxM2I0N2Q2NGYzODY0Mzc2ZTRjNmRhZmI3NTNiZjYxOWYwOGJiXCI7XG4iLCJpbXBvcnQge3N1Z2dlc3Rpb25Ub2tlbn0gZnJvbSBcIi4uL2NvbmZpZ1wiO1xuXG5jb25zdCB1cmwgPVxuICBcImh0dHBzOi8vc3VnZ2VzdGlvbnMuZGFkYXRhLnJ1L3N1Z2dlc3Rpb25zL2FwaS80XzEvcnMvaXBsb2NhdGUvYWRkcmVzc1wiO1xuXG5jb25zdCBvcHRpb25zID0ge1xuICBtZXRob2Q6IFwiR0VUXCIsXG4gIG1vZGU6IFwiY29yc1wiLFxuICBoZWFkZXJzOiB7XG4gICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICBBdXRob3JpemF0aW9uOiBcIlRva2VuIFwiICsgc3VnZ2VzdGlvblRva2VuXG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBzZXRQbGFjZSA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgdXNlclBsYWNlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ1c2VyUGxhY2VcIik7XG4gIGlmICh1c2VyUGxhY2UpIHJldHVybiB1c2VyUGxhY2U7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgb3B0aW9ucyk7XG4gICAgaWYgKCFyZXNwb25zZS5vaykgcmV0dXJuO1xuICAgIGNvbnN0IHBsYWNlID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIGNvbnN0IHtjaXR5LCByZWdpb259ID0gcGxhY2UubG9jYXRpb24uZGF0YTtcblxuICAgIGNvbnN0IHBsYWNlUmVnaW9ucyA9IHtcbiAgICAgINCf0YDQuNC80L7RgNGB0LrQuNC5OiBcItCS0LvQsNC00LjQstC+0YHRgtC+0LpcIiwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBzb25hcmpzL25vLWR1cGxpY2F0ZS1zdHJpbmdcbiAgICAgINCl0LDQsdCw0YDQvtCy0YHQutC40Lk6IFwi0KXQsNCx0LDRgNC+0LLRgdC6XCIsXG4gICAgICDQkNC80YPRgNGB0LrQsNGPOiBcItCR0LvQsNCz0L7QstC10YnQtdC90YHQulwiXG4gICAgfTtcblxuICAgIGNvbnN0IHBsYWNlQ2l0aWVzID0gW1xuICAgICAgXCLQktC70LDQtNC40LLQvtGB0YLQvtC6XCIsXG4gICAgICBcItCj0YHRgdGD0YDQuNC50YHQulwiLFxuICAgICAgXCLQpdCw0LHQsNGA0L7QstGB0LpcIixcbiAgICAgIFwi0JHQu9Cw0LPQvtCy0LXRidC10L3RgdC6XCJcbiAgICBdO1xuXG4gICAgbGV0IHVzZXJQbGFjZURldGVjdGVkO1xuICAgIGlmIChwbGFjZUNpdGllcy5pbmNsdWRlcyhjaXR5KSkge1xuICAgICAgdXNlclBsYWNlRGV0ZWN0ZWQgPSBjaXR5O1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmtleXMocGxhY2VSZWdpb25zKS5pbmNsdWRlcyhyZWdpb24pKSB7XG4gICAgICB1c2VyUGxhY2VEZXRlY3RlZCA9IHJlZ2lvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdXNlclBsYWNlRGV0ZWN0ZWQgPSBcItCS0LvQsNC00LjQstC+0YHRgtC+0LpcIjtcbiAgICB9XG5cbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInVzZXJQbGFjZVwiLCB1c2VyUGxhY2VEZXRlY3RlZCk7XG5cbiAgICByZXR1cm4gdXNlclBsYWNlRGV0ZWN0ZWQ7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufTtcbiIsImltcG9ydCB7c2V0UGxhY2V9IGZyb20gXCIuL2NvbW1vbi9zZXQtcGxhY2UuanNcIjtcblxuKGFzeW5jICgpID0+IHtcbiAgY29uc3QgdXNlclBsYWNlID0gYXdhaXQgc2V0UGxhY2UoKTtcbiAgc2VsZWN0LnZhbHVlID0gdXNlclBsYWNlO1xuICBzZWxlY3QuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJjaGFuZ2VcIikpO1xufSkoKTtcblxuY29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250YWN0c19fcGxhY2Utc2VsZWN0b3JcIik7XG5cbnNlbGVjdC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIChldmVudCkgPT4ge1xuICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gIGNvbnN0IHBsYWNlID0gdGFyZ2V0LnZhbHVlO1xuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInVzZXJQbGFjZVwiLCBwbGFjZSk7XG5cbiAgdGFyZ2V0LnN0eWxlLndpZHRoID0gYCR7cGxhY2UubGVuZ3RofWNoYDtcblxuICBjb25zdCBjb250YWN0c0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRhY3RzXCIpO1xuICBjb25zdCBwbGFjZURlcGVuZGVudEVsZW1lbnRzID0gY29udGFjdHNFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgXCJbZGF0YS1wbGFjZV1cIlxuICApO1xuICBwbGFjZURlcGVuZGVudEVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICBlbGVtZW50LmhpZGRlbiA9IGVsZW1lbnQuZGF0YXNldC5wbGFjZSAhPT0gcGxhY2U7XG4gIH0pO1xufSk7XG4iXSwibmFtZXMiOlsib3B0aW9ucyIsIm1ldGhvZCIsIm1vZGUiLCJoZWFkZXJzIiwiQWNjZXB0IiwiQXV0aG9yaXphdGlvbiIsInVzZXJQbGFjZSIsImFzeW5jIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInJlc3BvbnNlIiwiZmV0Y2giLCJvayIsInBsYWNlIiwianNvbiIsImNpdHkiLCJyZWdpb24iLCJsb2NhdGlvbiIsImRhdGEiLCJwbGFjZVJlZ2lvbnMiLCJ1c2VyUGxhY2VEZXRlY3RlZCIsImluY2x1ZGVzIiwiT2JqZWN0Iiwia2V5cyIsInNldEl0ZW0iLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJzZXRQbGFjZSIsInNlbGVjdCIsInZhbHVlIiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInRhcmdldCIsInN0eWxlIiwid2lkdGgiLCJsZW5ndGgiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJoaWRkZW4iLCJkYXRhc2V0Il0sIm1hcHBpbmdzIjoieUJBQU8sTUNLREEsRUFBVSxDQUNkQyxPQUFRLE1BQ1JDLEtBQU0sT0FDTkMsUUFBUyxDQUNQLGVBQWdCLG1CQUNoQkMsT0FBUSxtQkFDUkMsY0FBZSxtRENUbkIsV0FDRSxNQUFNQyxPRFlnQkMsV0FDdEIsTUFBTUQsRUFBWUUsYUFBYUMsUUFBUSxhQUN2QyxHQUFJSCxFQUFXLE9BQU9BLEVBRXRCLElBQ0UsTUFBTUksUUFBaUJDLE1BakJ6Qix3RUFpQm9DWCxHQUNsQyxJQUFLVSxFQUFTRSxHQUFJLE9BQ2xCLE1BQU1DLFFBQWNILEVBQVNJLFFBQ3ZCQyxLQUFDQSxFQUFJQyxPQUFFQSxHQUFVSCxFQUFNSSxTQUFTQyxLQUVoQ0MsRUFBZSxDQUNuQixhQUFZLGNBQ1osY0FBYSxZQUNiLFdBQVUsZ0JBVVosSUFBSUMsRUFXSixPQVRFQSxFQVRrQixDQUNsQixjQUNBLFlBQ0EsWUFDQSxnQkFJY0MsU0FBU04sR0FDSEEsRUFDWE8sT0FBT0MsS0FBS0osR0FBY0UsU0FBU0wsR0FDeEJBLEVBRUEsY0FHdEJSLGFBQWFnQixRQUFRLFlBQWFKLEdBRTNCQSxFQUNQLE1BQU9LLEdBQ1BDLFFBQVFDLE1BQU1GLEtDaERRRyxHQUN4QkMsRUFBT0MsTUFBUXhCLEVBQ2Z1QixFQUFPRSxjQUFjLElBQUlDLE1BQU0sWUFIakMsR0FNQSxNQUFNSCxFQUFTSSxTQUFTQyxlQUFlLDRCQUV2Q0wsRUFBT00saUJBQWlCLFVBQVdDLElBQ2pDLE1BQU1DLEVBQVNELEVBQU1DLE9BQ2Z4QixFQUFRd0IsRUFBT1AsTUFDckJ0QixhQUFhZ0IsUUFBUSxZQUFhWCxHQUVsQ3dCLEVBQU9DLE1BQU1DLE1BQVEsR0FBRzFCLEVBQU0yQixXQUVOUCxTQUFTQyxlQUFlLFlBQ0RPLGlCQUM3QyxnQkFFcUJDLFNBQVNDLElBQzlCQSxFQUFRQyxPQUFTRCxFQUFRRSxRQUFRaEMsUUFBVUEifQ=="}