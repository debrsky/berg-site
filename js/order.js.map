{"version":3,"file":"order.js","sources":["src/js/form/utils.js","src/js/config/index.js","src/js/order/form-structure.js","src/js/form/persistance.js","src/js/order.js","src/js/order/suggestion.js","src/js/order/required.js","src/js/order/custom-validity.js","src/js/order/make-json.js"],"sourcesContent":["export const cleanForm = (form) => {\n  const namedElements = form.querySelectorAll(\"[name]\");\n  namedElements.forEach((element) => {\n    if (element.matches(\"input[type=radio], input[type=checkbox]\")) {\n      element.checked = false;\n      return;\n    }\n\n    element.value = \"\";\n  });\n  form.dispatchEvent(new Event(\"change\"));\n};\n\nexport const saveForm = (form, options = {}) => {\n  const data = formSerialize(form, options);\n  const formName = form.getAttribute(\"name\");\n  localStorage.setItem(`form[name=${formName}]`, JSON.stringify(data));\n};\n\nexport const restoreSavedForm = (form) => {\n  const formName = form.getAttribute(\"name\");\n  const savedForm = localStorage.getItem(`form[name=${formName}]`);\n  if (savedForm) {\n    const data = JSON.parse(savedForm);\n    formDeserialize(form, data);\n  }\n\n  form.dispatchEvent(new Event(\"change\"));\n};\n\nexport const formSerialize = (form, options = {}) => {\n  let exclude = [];\n  if (typeof options.exclude === \"string\") exclude = [options.exclude];\n  if (Array.isArray(options.exclude)) exclude = options.exclude;\n\n  const formData = new FormData(form);\n\n  // TODO CAVEAT it doesn't work with elements with multiple values\n  return Object.fromEntries(\n    [...formData.entries()].filter(\n      ([key, value]) => value !== \"\" && !exclude.includes(key)\n    )\n  );\n};\n\nconst makeElementsMap = (form) => {\n  const namedElements = [...form.querySelectorAll(\"[name]\")];\n  return namedElements\n    .map((el) => [el.getAttribute(\"name\"), el])\n    .reduce((acc, [key, value]) => {\n      if (key in acc) {\n        const prevValue = acc[key];\n        if (Array.isArray(prevValue)) {\n          prevValue.push(value);\n          return acc;\n        }\n\n        acc[key] = [prevValue, value];\n        return acc;\n      }\n\n      acc[key] = value;\n      return acc;\n    }, Object.create(null));\n};\n\nconst deserializeElement = (element, key, value) => {\n  if (element.getAttribute(\"name\") !== key) throw Error();\n\n  if (element.matches(\"input[type=radio], input[type=checkbox]\")) {\n    if (element.getAttribute(\"value\") === value) {\n      element.checked = true;\n    }\n    return;\n  }\n\n  element.value = value;\n};\n\nexport const formDeserialize = (form, data) => {\n  // CAVEAT it doesn't work with elements with multiple values\n\n  const elementsMap = makeElementsMap(form);\n  cleanForm(form);\n\n  if (!data) return;\n\n  Object.entries(data).forEach(([key, value]) => {\n    // FIXME implement processing elements with multiple values\n    if (Array.isArray(value)) throw Error();\n\n    const element = elementsMap[key];\n    if (!element) return;\n\n    if (Array.isArray(element)) {\n      element.forEach((el) => deserializeElement(el, key, value));\n      return;\n    }\n\n    deserializeElement(element, key, value);\n  });\n};\n\n// Сохранение данных формы при перезагрузке страницы\n// https://blog.lisogorsky.ru/session-storage-save-data\n// https://github.com/FThompson/FormPersistence.js\n","export const suggestionToken = \"e4c13b47d64f3864376e4c6dafb753bf619f08bb\";\n","export const setPayerVisibility = (form) => {\n  const data = new FormData(form);\n\n  [\"consigner\", \"consignee\"].forEach((role) => {\n    const rolePayingContactElement = form.querySelector(\n      `.${role}-paying-contact`\n    );\n\n    const roleType = data.get(`${role}-type`);\n    const roleIsPayer = data.get(`${role}-is-payer`) === `${role}-is-payer`;\n    const rolePayingContactEnabled = roleIsPayer && roleType === \"legal-entity\";\n    rolePayingContactElement.hidden = !rolePayingContactEnabled;\n  });\n\n  const consignerIsPayer =\n    data.get(\"consigner-is-payer\") === \"consigner-is-payer\";\n  const consigneeIsPayer =\n    data.get(\"consignee-is-payer\") === \"consignee-is-payer\";\n\n  const payerElement = form.querySelector(\".section-payer\");\n  payerElement.hidden = consignerIsPayer || consigneeIsPayer;\n};\n\nconst setCounterpartyRoleStructure = (form, role) => {\n  const data = new FormData(form);\n\n  const legalEntityGroupElement = form.querySelector(\n    `.group-${role}-legal-entity`\n  );\n  const privatePersonGroupElement = form.querySelector(\n    `.group-${role}-private-person`\n  );\n\n  const type = data.get(`${role}-type`);\n\n  legalEntityGroupElement.hidden = type !== \"legal-entity\";\n  privatePersonGroupElement.hidden = type !== \"private-person\";\n};\n\nexport const setCounterpartyStructure = (form) => {\n  setCounterpartyRoleStructure(form, \"consigner\");\n  setCounterpartyRoleStructure(form, \"consignee\");\n  setCounterpartyRoleStructure(form, \"payer\");\n};\n\n// Управление видимостью полей в разделах погрузки/выгрузки\nconst setCargoOperationStructure = (form, operation) => {\n  const terminals = window.terminals;\n  const places = window.places;\n\n  const formData = new FormData(form);\n\n  const operationPlace = formData.get(`${operation}-place`);\n  const operationPoint = formData.get(`${operation}-point`);\n  const address = formData.get(`${operation}-point-client-address`).trim();\n  const addressElement = form.elements[`${operation}-point-client-address`];\n\n  let terminalTitle = `Терминал перевозчика`;\n\n  const operationPointTerminalControlElement = form.querySelector(\n    `.${operation}-terminal-control`\n  );\n  const operationPointClientControlElement = form.querySelector(\n    `.${operation}-client-control`\n  );\n  const operationPointPickupControlElement = form.querySelector(\n    `.${operation}-pickup-control`\n  );\n\n  const operationPointTerminalTitleElement = form.querySelector(\n    `.${operation}-point-terminal-title`\n  );\n\n  const operationPointClientAddressGroupElement = form.querySelector(\n    `.group-${operation}-point-client-address`\n  );\n\n  operationPointClientAddressGroupElement.hidden =\n    !operationPoint || operationPoint === `${operation}-point-terminal`;\n\n  if (!operationPlace) {\n    // Не выбран город\n    operationPointTerminalControlElement.hidden = false;\n    operationPointClientControlElement.hidden = false;\n    operationPointPickupControlElement.hidden = false;\n  } else if (operationPlace in terminals) {\n    // Выбран город из списка\n    operationPointTerminalControlElement.hidden = false;\n    operationPointClientControlElement.hidden = false;\n    operationPointPickupControlElement.hidden = true;\n\n    terminalTitle = `Терминал перевозчика: ${window.terminals[operationPlace]}`;\n\n    if (address === \"\" || Object.values(places).includes(address)) {\n      addressElement.value = places[operationPlace] + \" \";\n    }\n  } else {\n    // Выбран другой город\n    operationPointTerminalControlElement.hidden = true;\n    operationPointClientControlElement.hidden = true;\n    operationPointPickupControlElement.hidden = false;\n  }\n\n  operationPointTerminalTitleElement.textContent = terminalTitle;\n};\n\nexport const setCargoOperationsStructure = (form) => {\n  setCargoOperationStructure(form, \"loading\");\n  setCargoOperationStructure(form, \"unloading\");\n};\n","import {formSerialize, formDeserialize} from \"./utils\";\nconst eventListeners = [];\n\nexport const enablePersistance = (form) => {\n  const formName = form.getAttribute(\"name\");\n  const eventListenersObject = eventListeners.find((el) => el.form === form);\n  if (eventListenersObject) throw Error(`Persistance already enabled for form`);\n\n  const handleFormChange = () => {\n    const data = formSerialize(form);\n    sessionStorage.setItem(`form[name=${formName}]`, JSON.stringify(data));\n  };\n  const handleDOMContentLoaded = () => {\n    const data = JSON.parse(sessionStorage.getItem(`form[name=${formName}]`));\n    formDeserialize(form, data);\n\n    form.dispatchEvent(new Event(\"change\"));\n  };\n\n  eventListeners.push({form, handleFormChange, handleDOMContentLoaded});\n\n  form.addEventListener(\"change\", handleFormChange);\n  document.addEventListener(\"DOMContentLoaded\", handleDOMContentLoaded);\n};\n\nexport const disablePersistance = (form) => {\n  const eventListenersObject = eventListeners.find((el) => el.form === form);\n  if (!eventListenersObject)\n    throw Error(`Persistance already disabled for form`);\n\n  form.removeEventListener(\"change\", eventListenersObject.handleFormChange);\n  document.removeEventListener(\n    \"DOMContentLoaded\",\n    eventListenersObject.handleDOMContentLoaded\n  );\n};\n","import {cleanForm, saveForm, restoreSavedForm} from \"./form/utils\";\nimport setSuggestions from \"./order/suggestion\";\nimport makeOrderJSON from \"./order/make-json\";\nimport setRequiredAttributes from \"./order/required\";\nimport setCustomValidity from \"./order/custom-validity\";\n\nimport {\n  setPayerVisibility,\n  setCounterpartyStructure,\n  setCargoOperationsStructure\n} from \"./order/form-structure\";\nimport {enablePersistance} from \"./form/persistance.js\";\n\nconst form = document.forms.order;\nenablePersistance(form);\nsetSuggestions(form);\n\nconst consignerIsPayerElement = form.elements[\"consigner-is-payer\"];\nconst consigneeIsPayerElement = form.elements[\"consignee-is-payer\"];\n\nconst handleIsPayerCheckboxChange = (event) => {\n  if (!event) return;\n\n  if (\n    event.target === consignerIsPayerElement &&\n    consignerIsPayerElement.checked\n  ) {\n    consigneeIsPayerElement.checked = false;\n  }\n  if (\n    event.target === consigneeIsPayerElement &&\n    consigneeIsPayerElement.checked\n  ) {\n    consignerIsPayerElement.checked = false;\n  }\n};\n\nconst handleFormChange = (event) => {\n  handleIsPayerCheckboxChange(event);\n\n  setCounterpartyStructure(form);\n  setPayerVisibility(form);\n  setCargoOperationsStructure(form);\n  setRequiredAttributes(form);\n  setCustomValidity(form);\n};\n\nform.addEventListener(\"change\", handleFormChange);\n\nlet isSubmiting = false;\nform.addEventListener(\"submit\", (event) => {\n  event.preventDefault();\n  if (isSubmiting) return;\n  isSubmiting = true;\n\n  const buttonSubmit = form.querySelector(\"button[type=submit]\");\n  buttonSubmit.classList.add(\"button--submiting\");\n\n  saveForm(form, {exclude: [\"loading-date\", \"accept\"]});\n\n  const json = makeOrderJSON(form);\n\n  const dataToSend = new FormData();\n  dataToSend.append(\"data\", JSON.stringify(json));\n\n  const errorGroupElement = form\n    .querySelector(\"button[type=submit]\")\n    .closest(\".control-group\");\n  errorGroupElement.classList.remove(\"control-group--error\");\n\n  // TODO timeout for fetch\n  fetch(\"php/mailer/send.php\", {\n    method: \"POST\",\n    body: dataToSend\n  })\n    .then(function (res) {\n      if (!res.ok)\n        throw Error(\n          \"При отправке заявки возникла ошибка, заявка не отправлена.\"\n        );\n      return res.json();\n    })\n    .then(function (data) {\n      console.log(data);\n      if (data.result !== \"success\")\n        throw Error(\n          \"При отправке заявки возникла ошибка почтового сервера, заявка не отправлена.\"\n        );\n\n      cleanForm(form);\n      window.location.assign(\"order-ok.html\");\n    })\n    .catch((err) => {\n      console.error(err.message);\n      errorGroupElement.classList.add(\"control-group--error\");\n    })\n    .finally(() => {\n      buttonSubmit.classList.remove(\"button--submiting\");\n      isSubmiting = false;\n    });\n\n  // const content = dialog.$el.querySelector(\".dialog-content__data\");\n  // window.dialog.show();\n});\n\nconst cleanFormElement = form.querySelector(\".suggest-helper--clean-form\");\ncleanFormElement.addEventListener(\"click\", () => {\n  cleanForm(form);\n});\n\nconst fillFormElement = form.querySelector(\".suggest-helper--fill-form\");\nfillFormElement.addEventListener(\"click\", () => {\n  restoreSavedForm(form);\n});\n","import {suggestionToken} from \"../config\";\n\nexport default function setSuggestions(form) {\n  const suggestionElements = form.querySelectorAll(\"[data-suggestion-type]\");\n  suggestionElements.forEach((el) => {\n    const type = {\n      address: \"ADDRESS\",\n      name: \"NAME\",\n      email: \"EMAIL\"\n    }[el.dataset.suggestionType];\n\n    if (!type) throw Error();\n\n    // eslint-disable-next-line no-undef\n    $(el).suggestions({\n      token: suggestionToken,\n      type,\n      onSelect: function (suggestion) {\n        this.dispatchEvent(new Event(\"change\", {bubbles: true}));\n      }\n    });\n  });\n\n  const setHandlers = (counterpartyRole) => {\n    const counterpartyElement = form.elements[`${counterpartyRole}`];\n\n    // eslint-disable-next-line no-undef\n    $(counterpartyElement).suggestions({\n      token: suggestionToken,\n      type: \"PARTY\",\n      onSelect: function (suggestion) {\n        const OGRNElement = form.elements[`${counterpartyRole}-OGRN`];\n        const INNElement = form.elements[`${counterpartyRole}-INN`];\n        const KPPElement = form.elements[`${counterpartyRole}-KPP`];\n        const addressElement = form.elements[`${counterpartyRole}-address`];\n\n        console.log(suggestion);\n\n        const address = suggestion.data.address.value;\n\n        if (suggestion.data.type === \"INDIVIDUAL\") {\n          OGRNElement.value = suggestion.data.ogrn;\n          INNElement.value = suggestion.data.inn;\n          KPPElement.value = \"\";\n          addressElement.value = address;\n        }\n\n        if (suggestion.data.type === \"LEGAL\") {\n          OGRNElement.value = suggestion.data.ogrn;\n          INNElement.value = suggestion.data.inn;\n          KPPElement.value = suggestion.data.kpp;\n          addressElement.value = address;\n        }\n      }\n    });\n  };\n\n  setHandlers(\"consigner\");\n  setHandlers(\"consignee\");\n  setHandlers(\"payer\");\n}\n","export default (form) => {\n  const controlsRequired = form.querySelectorAll(\".control--required\");\n\n  controlsRequired.forEach((el) => {\n    const uiElement = el.querySelector(\"input, textarea, select\");\n    if (uiElement.matches(\"[hidden] *\")) {\n      uiElement.removeAttribute(\"required\");\n      return;\n    }\n    uiElement.setAttribute(\"required\", \"\");\n  });\n};\n","export default (form) => {\n  // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#the-constraint-validation-api\n  // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#dom-cva-setcustomvalidity\n  [\"loading\", \"unloading\"].forEach((operation) => {\n    const addressElement = form.elements[`${operation}-point-client-address`];\n    const placeElement = form.elements[`${operation}-place`];\n    const placeView = placeElement.querySelector(\n      `[value=\"${placeElement.value}\"]`\n    ).textContent;\n\n    if (\n      !addressElement.matches(\"[hidden] *\") &&\n      addressElement.value.replace(placeView, \"\").length <= 4\n    ) {\n      addressElement.setCustomValidity(\"Введите адрес.\");\n      return;\n    }\n\n    addressElement.setCustomValidity(\"\");\n  });\n};\n","export default (form) => {\n  const data = new FormData(form);\n  const order = Object.create(null);\n  const places = window.places;\n\n  const cargo = Object.create(null);\n  Object.entries({\n    name: \"cargo\",\n    weight: \"cargo-weight\",\n    volume: \"cargo-volume\",\n    qty: \"cargo-qty\",\n    condition: \"cargo-condition\",\n    value: \"cargo-value\",\n    insurance: \"insurance\"\n  }).forEach(([key, value]) => {\n    cargo[key] = data.get(value);\n  });\n  order.cargo = cargo;\n\n  [\"consigner\", \"consignee\", \"payer\"].forEach((role) => {\n    if (\n      role === \"payer\" &&\n      (Boolean(data.get(\"consigner-is-payer\")) ||\n        Boolean(data.get(\"consignee-is-payer\")))\n    )\n      return;\n\n    const counterAgent = Object.create(null);\n    const counterAgentType = data.get(`${role}-type`);\n    counterAgent.type = counterAgentType;\n    if (counterAgentType === \"legal-entity\") {\n      Object.entries({\n        name: `${role}`,\n        INN: `${role}-INN`,\n        KPP: `${role}-KPP`,\n        OGRN: `${role}-OGRN`,\n        address: `${role}-address`,\n        cargoContactTel: `${role}-cargo-contact-tel`,\n        cargoContactFio: `${role}-cargo-contact-fio`,\n        payingContactTel: `${role}-paying-contact-tel`,\n        payingContactFio: `${role}-paying-contact-fio`\n      }).forEach(([key, value]) => {\n        if (\n          role === \"payer\" &&\n          (key === \"cargoContactTel\" || key === \"cargoContactFio\")\n        )\n          return;\n\n        counterAgent[key] = data.get(value);\n      });\n    }\n    if (counterAgentType === \"private-person\") {\n      Object.entries({\n        name: `${role}-fio`,\n        tel: `${role}-tel`\n      }).forEach(([key, value]) => {\n        counterAgent[key] = data.get(value);\n      });\n    }\n\n    if ([\"consigner\", \"consignee\"].includes(role)) {\n      counterAgent.isPayer = Boolean(data.get(`${role}-is-payer`));\n    }\n\n    if (role === \"payer\") {\n      counterAgent.isPayer = true;\n    }\n\n    order[role] = counterAgent;\n  });\n\n  [\"loading\", \"unloading\"].forEach((operation) => {\n    const operationObject = Object.create(null);\n    Object.entries({\n      date: `${operation}-date`,\n      time: `${operation}-time`,\n      place: `${operation}-place`,\n      point: `${operation}-point`,\n      pointClientAddress: `${operation}-point-client-address`\n    }).forEach(([key, value]) => {\n      if (key === \"place\") {\n        operationObject[key] = places[data.get(value)] ?? \"\";\n        return;\n      }\n\n      operationObject[key] = data.get(value);\n    });\n    order[operation] = operationObject;\n  });\n\n  order.paymentForm = data.get(\"payment-form\");\n  order.memo = data.get(\"memo\");\n\n  const author = Object.create(null);\n  [\"fio\", \"tel\", \"email\"].forEach((key) => {\n    author[key] = data.get(`order-author-${key}`);\n  });\n  order.author = author;\n\n  return order;\n};\n"],"names":["cleanForm","form","querySelectorAll","forEach","element","matches","checked","value","dispatchEvent","Event","formSerialize","options","exclude","Array","isArray","formData","FormData","Object","fromEntries","entries","filter","key","includes","deserializeElement","getAttribute","Error","formDeserialize","data","elementsMap","map","el","reduce","acc","prevValue","push","create","makeElementsMap","suggestionToken","setCounterpartyRoleStructure","role","legalEntityGroupElement","querySelector","privatePersonGroupElement","type","get","hidden","setCargoOperationStructure","operation","terminals","window","places","operationPlace","operationPoint","address","trim","addressElement","elements","terminalTitle","operationPointTerminalControlElement","operationPointClientControlElement","operationPointPickupControlElement","operationPointTerminalTitleElement","values","textContent","eventListeners","document","forms","order","formName","find","handleFormChange","sessionStorage","setItem","JSON","stringify","handleDOMContentLoaded","parse","getItem","addEventListener","enablePersistance","name","email","dataset","suggestionType","$","suggestions","token","onSelect","suggestion","this","bubbles","setHandlers","counterpartyRole","counterpartyElement","OGRNElement","INNElement","KPPElement","console","log","ogrn","inn","kpp","setSuggestions","consignerIsPayerElement","consigneeIsPayerElement","event","target","handleIsPayerCheckboxChange","setCounterpartyStructure","rolePayingContactElement","roleType","rolePayingContactEnabled","consignerIsPayer","consigneeIsPayer","setPayerVisibility","setCargoOperationsStructure","uiElement","removeAttribute","setAttribute","setRequiredAttributes","placeElement","placeView","replace","length","setCustomValidity","isSubmiting","preventDefault","buttonSubmit","classList","add","localStorage","saveForm","json","cargo","weight","volume","qty","condition","insurance","Boolean","counterAgent","counterAgentType","INN","KPP","OGRN","cargoContactTel","cargoContactFio","payingContactTel","payingContactFio","tel","isPayer","operationObject","date","time","place","point","pointClientAddress","paymentForm","memo","author","makeOrderJSON","dataToSend","append","errorGroupElement","closest","remove","fetch","method","body","then","res","ok","result","location","assign","catch","err","error","message","finally","savedForm","restoreSavedForm"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}