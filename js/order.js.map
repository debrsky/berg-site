{"version":3,"file":"order.js","sources":["src/js/form/utils.js","src/js/config/index.js","src/js/order/form-structure.js","src/js/form/persistance.js","src/js/order.js","src/js/order/suggestion.js","src/js/order/required.js","src/js/order/make-json.js"],"sourcesContent":["export const cleanForm = (form) => {\n  const namedElements = form.querySelectorAll(\"[name]\");\n  namedElements.forEach((element) => {\n    if (element.matches(\"input[type=radio], input[type=checkbox]\")) {\n      element.checked = false;\n      return;\n    }\n\n    element.value = \"\";\n  });\n  form.dispatchEvent(new Event(\"change\"));\n};\n\nexport const saveForm = (form) => {\n  const data = formSerialize(form);\n  const formName = form.getAttribute(\"name\");\n  localStorage.setItem(`form[name=${formName}]`, JSON.stringify(data));\n};\n\nexport const restoreSavedForm = (form) => {\n  const formName = form.getAttribute(\"name\");\n  const savedForm = localStorage.getItem(`form[name=${formName}]`);\n  if (savedForm) {\n    const data = JSON.parse(savedForm);\n    formDeserialize(form, data);\n  }\n\n  form.dispatchEvent(new Event(\"change\"));\n};\n\nexport const formSerialize = (form) => {\n  const formData = new FormData(form);\n\n  // CAVEAT it doesn't work with elements with multiple values\n  return Object.fromEntries(\n    [...formData.entries()].filter(([key, value]) => value !== \"\")\n  );\n};\n\nconst makeElementsMap = (form) => {\n  const namedElements = [...form.querySelectorAll(\"[name]\")];\n  return namedElements\n    .map((el) => [el.getAttribute(\"name\"), el])\n    .reduce((acc, [key, value]) => {\n      if (key in acc) {\n        const prevValue = acc[key];\n        if (Array.isArray(prevValue)) {\n          prevValue.push(value);\n          return acc;\n        }\n\n        acc[key] = [prevValue, value];\n        return acc;\n      }\n\n      acc[key] = value;\n      return acc;\n    }, Object.create(null));\n};\n\nconst deserializeElement = (element, key, value) => {\n  if (element.getAttribute(\"name\") !== key) throw Error();\n\n  if (element.matches(\"input[type=radio], input[type=checkbox]\")) {\n    if (element.getAttribute(\"value\") === value) {\n      element.checked = true;\n    }\n    return;\n  }\n\n  element.value = value;\n};\n\nexport const formDeserialize = (form, data) => {\n  // CAVEAT it doesn't work with elements with multiple values\n\n  const elementsMap = makeElementsMap(form);\n  cleanForm(form);\n\n  if (!data) return;\n\n  Object.entries(data).forEach(([key, value]) => {\n    // FIXME implement processing elements with multiple values\n    if (Array.isArray(value)) throw Error();\n\n    const element = elementsMap[key];\n    if (!element) return;\n\n    if (Array.isArray(element)) {\n      element.forEach((el) => deserializeElement(el, key, value));\n      return;\n    }\n\n    deserializeElement(element, key, value);\n  });\n};\n\n// Сохранение данных формы при перезагрузке страницы\n// https://blog.lisogorsky.ru/session-storage-save-data\n// https://github.com/FThompson/FormPersistence.js\n","export const suggestionToken = \"e4c13b47d64f3864376e4c6dafb753bf619f08bb\";\n","export const setPayerVisibility = (form) => {\n  const data = new FormData(form);\n\n  [\"consigner\", \"consignee\"].forEach((role) => {\n    const rolePayingContactElement = form.querySelector(\n      `.${role}-paying-contact`\n    );\n\n    const roleType = data.get(`${role}-type`);\n    const roleIsPayer = data.get(`${role}-is-payer`) === `${role}-is-payer`;\n    const rolePayingContactEnabled = roleIsPayer && roleType === \"legal-entity\";\n    rolePayingContactElement.hidden = !rolePayingContactEnabled;\n  });\n\n  const consignerIsPayer =\n    data.get(\"consigner-is-payer\") === \"consigner-is-payer\";\n  const consigneeIsPayer =\n    data.get(\"consignee-is-payer\") === \"consignee-is-payer\";\n\n  const payerElement = form.querySelector(\".section-payer\");\n  payerElement.hidden = consignerIsPayer || consigneeIsPayer;\n};\n\nconst setCounterpartyRoleStructure = (form, role) => {\n  const data = new FormData(form);\n\n  const legalEntityGroupElement = form.querySelector(\n    `.group-${role}-legal-entity`\n  );\n  const privatePersonGroupElement = form.querySelector(\n    `.group-${role}-private-person`\n  );\n\n  const type = data.get(`${role}-type`);\n\n  legalEntityGroupElement.hidden = type !== \"legal-entity\";\n  privatePersonGroupElement.hidden = type !== \"private-person\";\n};\n\nexport const setCounterpartyStructure = (form) => {\n  setCounterpartyRoleStructure(form, \"consigner\");\n  setCounterpartyRoleStructure(form, \"consignee\");\n  setCounterpartyRoleStructure(form, \"payer\");\n};\n\n// Управление видимостью полей в разделах погрузки/выгрузки\nconst setCargoOperationStructure = (form, operation) => {\n  const terminals = window.terminals;\n  const places = window.places;\n\n  const formData = new FormData(form);\n\n  const operationPlace = formData.get(`${operation}-place`);\n  const operationPoint = formData.get(`${operation}-point`);\n  const address = formData.get(`${operation}-point-client-address`).trim();\n  const addressElement = form.elements[`${operation}-point-client-address`];\n\n  let terminalTitle = `Терминал перевозчика`;\n\n  const operationPointTerminalControlElement = form.querySelector(\n    `.${operation}-terminal-control`\n  );\n  const operationPointClientControlElement = form.querySelector(\n    `.${operation}-client-control`\n  );\n  const operationPointPickupControlElement = form.querySelector(\n    `.${operation}-pickup-control`\n  );\n\n  const operationPointTerminalTitleElement = form.querySelector(\n    `.${operation}-point-terminal-title`\n  );\n\n  const operationPointClientAddressGroupElement = form.querySelector(\n    `.group-${operation}-point-client-address`\n  );\n\n  operationPointClientAddressGroupElement.hidden =\n    !operationPoint || operationPoint === `${operation}-point-terminal`;\n\n  if (!operationPlace) {\n    // Не выбран город\n    operationPointTerminalControlElement.hidden = false;\n    operationPointClientControlElement.hidden = false;\n    operationPointPickupControlElement.hidden = false;\n  } else if (operationPlace in terminals) {\n    // Выбран город из списка\n    operationPointTerminalControlElement.hidden = false;\n    operationPointClientControlElement.hidden = false;\n    operationPointPickupControlElement.hidden = true;\n\n    terminalTitle = `Терминал перевозчика: ${window.terminals[operationPlace]}`;\n\n    if (address === \"\" || Object.values(places).includes(address)) {\n      addressElement.value = places[operationPlace] + \" \";\n    }\n  } else {\n    // Выбран другой город\n    operationPointTerminalControlElement.hidden = true;\n    operationPointClientControlElement.hidden = true;\n    operationPointPickupControlElement.hidden = false;\n  }\n\n  operationPointTerminalTitleElement.textContent = terminalTitle;\n};\n\nexport const setCargoOperationsStructure = (form) => {\n  setCargoOperationStructure(form, \"loading\");\n  setCargoOperationStructure(form, \"unloading\");\n};\n","import {formSerialize, formDeserialize} from \"./utils\";\nconst eventListeners = [];\n\nexport const enablePersistance = (form) => {\n  const formName = form.getAttribute(\"name\");\n  const eventListenersObject = eventListeners.find((el) => el.form === form);\n  if (eventListenersObject) throw Error(`Persistance already enabled for form`);\n\n  const handleFormChange = () => {\n    const data = formSerialize(form);\n    sessionStorage.setItem(`form[name=${formName}]`, JSON.stringify(data));\n  };\n  const handleDOMContentLoaded = () => {\n    const data = JSON.parse(sessionStorage.getItem(`form[name=${formName}]`));\n    formDeserialize(form, data);\n\n    form.dispatchEvent(new Event(\"change\"));\n  };\n\n  eventListeners.push({form, handleFormChange, handleDOMContentLoaded});\n\n  form.addEventListener(\"change\", handleFormChange);\n  document.addEventListener(\"DOMContentLoaded\", handleDOMContentLoaded);\n};\n\nexport const disablePersistance = (form) => {\n  const eventListenersObject = eventListeners.find((el) => el.form === form);\n  if (!eventListenersObject)\n    throw Error(`Persistance already disabled for form`);\n\n  form.removeEventListener(\"change\", eventListenersObject.handleFormChange);\n  document.removeEventListener(\n    \"DOMContentLoaded\",\n    eventListenersObject.handleDOMContentLoaded\n  );\n};\n","import {cleanForm, saveForm, restoreSavedForm} from \"./form/utils\";\nimport setSuggestions from \"./order/suggestion\";\nimport makeOrderJSON from \"./order/make-json\";\nimport setRequiredAttributes from \"./order/required\";\nimport {\n  setPayerVisibility,\n  setCounterpartyStructure,\n  setCargoOperationsStructure\n} from \"./order/form-structure\";\nimport {enablePersistance} from \"./form/persistance.js\";\n\nconst form = document.forms.order;\nenablePersistance(form);\nsetSuggestions(form);\n\nconst consignerIsPayerElement = form.elements[\"consigner-is-payer\"];\nconst consigneeIsPayerElement = form.elements[\"consignee-is-payer\"];\n\nconst handleIsPayerCheckboxChange = (event) => {\n  if (!event) return;\n\n  if (\n    event.target === consignerIsPayerElement &&\n    consignerIsPayerElement.checked\n  ) {\n    consigneeIsPayerElement.checked = false;\n  }\n  if (\n    event.target === consigneeIsPayerElement &&\n    consigneeIsPayerElement.checked\n  ) {\n    consignerIsPayerElement.checked = false;\n  }\n};\n\nconst handleFormChange = (event) => {\n  handleIsPayerCheckboxChange(event);\n\n  setCounterpartyStructure(form);\n  setPayerVisibility(form);\n  setCargoOperationsStructure(form);\n  setRequiredAttributes(form);\n};\n\nform.addEventListener(\"change\", handleFormChange);\n\nlet isSubmiting = false;\nform.addEventListener(\"submit\", (event) => {\n  event.preventDefault();\n  if (isSubmiting) return;\n  isSubmiting = true;\n\n  const buttonSubmit = form.querySelector(\"button[type=submit]\");\n  buttonSubmit.classList.add(\"button--submiting\");\n\n  saveForm(form);\n\n  const json = makeOrderJSON(form);\n\n  const dataToSend = new FormData();\n  dataToSend.append(\"data\", JSON.stringify(json));\n\n  const errorGroupElement = form\n    .querySelector(\"button[type=submit]\")\n    .closest(\".control-group\");\n  errorGroupElement.classList.remove(\"control-group--error\");\n\n  // TODO timeout for fetch\n  fetch(\"php/mailer/send.php\", {\n    method: \"POST\",\n    body: dataToSend\n  })\n    .then(function (res) {\n      if (!res.ok)\n        throw Error(\n          \"При отправке заявки возникла ошибка, заявка не отправлена.\"\n        );\n      return res.json();\n    })\n    .then(function (data) {\n      console.log(data);\n      if (data.result !== \"success\")\n        throw Error(\n          \"При отправке заявки возникла ошибка почтового сервера, заявка не отправлена.\"\n        );\n\n      cleanForm(form);\n      window.location.assign(\"order-ok.html\");\n    })\n    .catch((err) => {\n      console.error(err.message);\n      errorGroupElement.classList.add(\"control-group--error\");\n    })\n    .finally(() => {\n      buttonSubmit.classList.remove(\"button--submiting\");\n      isSubmiting = false;\n    });\n\n  // const content = dialog.$el.querySelector(\".dialog-content__data\");\n  // window.dialog.show();\n});\n\nconst cleanFormElement = form.querySelector(\".suggest-helper--clean-form\");\ncleanFormElement.addEventListener(\"click\", () => {\n  cleanForm(form);\n});\n\nconst fillFormElement = form.querySelector(\".suggest-helper--fill-form\");\nfillFormElement.addEventListener(\"click\", () => restoreSavedForm(form));\n","import {suggestionToken} from \"../config\";\n\nexport default function setSuggestions(form) {\n  const suggestionElements = form.querySelectorAll(\"[data-suggestion-type]\");\n  suggestionElements.forEach((el) => {\n    const type = {\n      address: \"ADDRESS\",\n      name: \"NAME\",\n      email: \"EMAIL\"\n    }[el.dataset.suggestionType];\n\n    if (!type) throw Error();\n\n    // eslint-disable-next-line no-undef\n    $(el).suggestions({token: suggestionToken, type});\n    // TODO адрес без области и района https://codepen.io/dadata/pen/qdwPdZ\n  });\n\n  const setHandlers = (counterpartyRole) => {\n    const counterpartyElement = form.elements[`${counterpartyRole}`];\n\n    // eslint-disable-next-line no-undef\n    $(counterpartyElement).suggestions({\n      token: suggestionToken,\n      type: \"PARTY\",\n      onSelect: function (suggestion) {\n        const OGRNElement = form.elements[`${counterpartyRole}-OGRN`];\n        const INNElement = form.elements[`${counterpartyRole}-INN`];\n        const KPPElement = form.elements[`${counterpartyRole}-KPP`];\n        const addressElement = form.elements[`${counterpartyRole}-address`];\n\n        console.log(suggestion);\n\n        const address = suggestion.data.address.value;\n\n        if (suggestion.data.type === \"INDIVIDUAL\") {\n          OGRNElement.value = suggestion.data.ogrn;\n          INNElement.value = suggestion.data.inn;\n          KPPElement.value = \"\";\n          addressElement.value = address;\n        }\n\n        if (suggestion.data.type === \"LEGAL\") {\n          OGRNElement.value = suggestion.data.ogrn;\n          INNElement.value = suggestion.data.inn;\n          KPPElement.value = suggestion.data.kpp;\n          addressElement.value = address;\n        }\n      }\n    });\n  };\n\n  setHandlers(\"consigner\");\n  setHandlers(\"consignee\");\n  setHandlers(\"payer\");\n}\n","export default (form) => {\n  const controlsRequired = form.querySelectorAll(\".control--required\");\n\n  controlsRequired.forEach((el) => {\n    const uiElement = el.querySelector(\"input, textarea, select\");\n    if (uiElement.matches(\"[hidden] *\")) {\n      uiElement.removeAttribute(\"required\");\n      return;\n    }\n    uiElement.setAttribute(\"required\", \"\");\n  });\n};\n","export default (form) => {\n  const data = new FormData(form);\n  const order = Object.create(null);\n  const places = window.places;\n\n  const cargo = Object.create(null);\n  Object.entries({\n    name: \"cargo\",\n    weight: \"cargo-weight\",\n    volume: \"cargo-volume\",\n    qty: \"cargo-qty\",\n    condition: \"cargo-condition\",\n    value: \"cargo-value\",\n    insurance: \"insurance\"\n  }).forEach(([key, value]) => {\n    cargo[key] = data.get(value);\n  });\n  order.cargo = cargo;\n\n  [\"consigner\", \"consignee\", \"payer\"].forEach((role) => {\n    if (\n      role === \"payer\" &&\n      (Boolean(data.get(\"consigner-is-payer\")) ||\n        Boolean(data.get(\"consignee-is-payer\")))\n    )\n      return;\n\n    const counterAgent = Object.create(null);\n    const counterAgentType = data.get(`${role}-type`);\n    counterAgent.type = counterAgentType;\n    if (counterAgentType === \"legal-entity\") {\n      Object.entries({\n        name: `${role}`,\n        INN: `${role}-INN`,\n        KPP: `${role}-KPP`,\n        OGRN: `${role}-OGRN`,\n        address: `${role}-address`,\n        cargoContactTel: `${role}-cargo-contact-tel`,\n        cargoContactFio: `${role}-cargo-contact-fio`,\n        payingContactTel: `${role}-paying-contact-tel`,\n        payingContactFio: `${role}-paying-contact-fio`\n      }).forEach(([key, value]) => {\n        if (\n          role === \"payer\" &&\n          (key === \"cargoContactTel\" || key === \"cargoContactFio\")\n        )\n          return;\n\n        counterAgent[key] = data.get(value);\n      });\n    }\n    if (counterAgentType === \"private-person\") {\n      Object.entries({\n        name: `${role}-fio`,\n        tel: `${role}-tel`\n      }).forEach(([key, value]) => {\n        counterAgent[key] = data.get(value);\n      });\n    }\n\n    if ([\"consigner\", \"consignee\"].includes(role)) {\n      counterAgent.isPayer = Boolean(data.get(`${role}-is-payer`));\n    }\n\n    order[role] = counterAgent;\n  });\n\n  [\"loading\", \"unloading\"].forEach((operation) => {\n    const operationObject = Object.create(null);\n    Object.entries({\n      date: `${operation}-date`,\n      time: `${operation}-time`,\n      place: `${operation}-place`,\n      point: `${operation}-point`,\n      pointClientAddress: `${operation}-point-client-address`\n    }).forEach(([key, value]) => {\n      if (key === \"place\") {\n        operationObject[key] = places[data.get(value)] ?? \"\";\n        return;\n      }\n\n      operationObject[key] = data.get(value);\n    });\n    order[operation] = operationObject;\n  });\n\n  order.paymentForm = data.get(\"payment-form\");\n  order.memo = data.get(\"memo\");\n\n  const author = Object.create(null);\n  [\"fio\", \"tel\", \"email\"].forEach((key) => {\n    author[key] = data.get(`order-author-${key}`);\n  });\n  order.author = author;\n\n  return order;\n};\n"],"names":["cleanForm","form","querySelectorAll","forEach","element","matches","checked","value","dispatchEvent","Event","formSerialize","formData","FormData","Object","fromEntries","entries","filter","key","deserializeElement","getAttribute","Error","formDeserialize","data","elementsMap","map","el","reduce","acc","prevValue","Array","isArray","push","create","makeElementsMap","suggestionToken","setCounterpartyRoleStructure","role","legalEntityGroupElement","querySelector","privatePersonGroupElement","type","get","hidden","setCargoOperationStructure","operation","terminals","window","places","operationPlace","operationPoint","address","trim","addressElement","elements","terminalTitle","operationPointTerminalControlElement","operationPointClientControlElement","operationPointPickupControlElement","operationPointTerminalTitleElement","values","includes","textContent","eventListeners","document","forms","order","formName","find","handleFormChange","sessionStorage","setItem","JSON","stringify","handleDOMContentLoaded","parse","getItem","addEventListener","enablePersistance","name","email","dataset","suggestionType","$","suggestions","token","setHandlers","counterpartyRole","counterpartyElement","onSelect","suggestion","OGRNElement","INNElement","KPPElement","console","log","ogrn","inn","kpp","setSuggestions","consignerIsPayerElement","consigneeIsPayerElement","event","target","handleIsPayerCheckboxChange","setCounterpartyStructure","rolePayingContactElement","roleType","rolePayingContactEnabled","consignerIsPayer","consigneeIsPayer","setPayerVisibility","setCargoOperationsStructure","uiElement","removeAttribute","setAttribute","setRequiredAttributes","isSubmiting","preventDefault","buttonSubmit","classList","add","localStorage","saveForm","json","cargo","weight","volume","qty","condition","insurance","Boolean","counterAgent","counterAgentType","INN","KPP","OGRN","cargoContactTel","cargoContactFio","payingContactTel","payingContactFio","tel","isPayer","operationObject","date","time","place","point","pointClientAddress","paymentForm","memo","author","makeOrderJSON","dataToSend","append","errorGroupElement","closest","remove","fetch","method","body","then","res","ok","result","location","assign","catch","err","error","message","finally","savedForm","restoreSavedForm"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}